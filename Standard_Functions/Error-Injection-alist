;ERROR INJECTION:
;=================

(defun bit_flip_pair (n flg lst)
       (declare (xargs :guard (and (integerp n)
       		       	      	   (booleanp flg)
       		       	      	   (true-listp lst)
				   (alistp lst))
		       :verify-guards nil))

       (if (zp n)
       	   (if flg
	       (cons (cons (not (car (car lst)))
	       	     	   (cdr (car lst)))
		     (cdr lst))
	       (cons (cons (car (car lst))
	       	     	   (not (cdr (car lst))))
		     (cdr lst)))
	   (cons (car lst) (bit_flip_pair (- n 1) flg (cdr lst)))))
	   
;n: location in codeword
;flg = T: flip xn (otherwise, flip yn)
;lst: codeword

;--------------------------------------------------------------------------
;THEOREMS

(defthm single-bit-flips
	(implies (and (booleanp flg)
		      (>= n 0)
		      (< n (len lst))
		      (alistp lst)
		      (not (endp lst)))
		 (equal 
		 	(count_element_mismatch
				lst
				(bit_flip_pair n flg lst))
			1)))

(defthm list-change-after-flip
	(implies (and (booleanp flg)
		      (>= n 0)
		      (< n (len lst))
		      (alistp lst))
		 (not (equal lst (bit_flip_pair n flg lst)))))


(defthm len-bit-flip
	(implies (and (booleanp flg)
		      (>= n 0)
		      (< n (len lst))
		      (alistp lst))
		 (equal (len lst)
		 	(len (bit_flip_pair n flg lst)))))

(defthm append-bit-flip
	(implies (and (booleanp flg)
		      (alistp A)
		      (true-listp A)
		      (>= n 0)
		      (< n (len A)))
		 (equal (append (bit_flip_pair n flg A) B)
		 	(bit_flip_pair n flg (append A B))))
	:hints (("Goal" :in-theory (disable len-bit-flip))))

(defthm cons-bit-flip
	(implies (and (booleanp flg)
		      (alistp lst)
		      (booleanp A)
		      (booleanp B)
		      (not (zp n))
		      (> n 0)
		      (< n (len lst)))
		 (equal (bit_flip_pair n flg (cons (cons A B) lst))
		 	(cons (cons a b) (bit_flip_pair (- n 1) flg lst)))))

(defthmd cdr-bitflip
	(implies (and (booleanp flg)
		      (alistp lst)
		      (zp n))
		 (equal (cdr (bit_flip_pair n flg lst))
		 	(cdr lst))))

(DEFTHMD cdr-bitflip-not-zpn
        (IMPLIES (AND (BOOLEANP FLG)
                      (ALISTP LST)
                      (NOT (ZP N))
                      (> N 0)
                      (< N (LEN LST)))
                 (EQUAL (CDR (BIT_FLIP_PAIR N FLG LST))
                        (BIT_FLIP_PAIR (- N 1) FLG (CDR LST))))
        :INSTRUCTIONS (:PROMOTE (:DV 1 1)
                                (:REWRITE BIT_FLIP_PAIR)
                                :S
                                :UP :S
                                :TOP :PROVE))

(defthmd bitflip-cons
	 (implies (and (alistp lst)
		       (not (zp n))
		       (booleanp flg))
	 	  (equal (bit_flip_pair n flg lst)
		  	 (cons (car lst)
			       (bit_flip_pair (- n 1) flg (cdr lst))))))
